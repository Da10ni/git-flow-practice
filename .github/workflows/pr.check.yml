name: Git Flow Sync
on:
  pull_request:
    types: [closed]
    branches: [main, development]

permissions:
  contents: write
  pull-requests: write

jobs:
  sync:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup and Sync
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Get info
          BRANCH="${{ github.event.pull_request.head.ref }}"
          TARGET="${{ github.event.pull_request.base.ref }}"
          
          # Branch protection validation
          if [ "$TARGET" = "main" ]; then
            # Main branch: only hotfix/* and release/* allowed
            if [[ ! "$BRANCH" =~ ^(hotfix|release)/ ]]; then
              echo "‚ùå INVALID MERGE TO MAIN!"
              echo "‚ùå Branch: $BRANCH"
              echo "‚ùå Only hotfix/* and release/* can merge to main"
              # Revert the merge (if possible) or create issue
              gh issue create --title "üö® Invalid merge to main: $BRANCH" --body "Branch $BRANCH was merged to main but only hotfix/* and release/* are allowed!"
              exit 1
            fi
          elif [ "$TARGET" = "development" ]; then
            # Development branch: only hotfix/*, release/*, feature/* allowed  
            if [[ ! "$BRANCH" =~ ^(hotfix|release|feature)/ ]]; then
              echo "‚ùå INVALID MERGE TO DEVELOPMENT!"
              echo "‚ùå Branch: $BRANCH"
              echo "‚ùå Only hotfix/*, release/*, and feature/* can merge to development"
              # Revert the merge (if possible) or create issue
              gh issue create --title "üö® Invalid merge to development: $BRANCH" --body "Branch $BRANCH was merged to development but only hotfix/*, release/*, and feature/* are allowed!"
              exit 1
            fi
          fi
          
          # Check if hotfix or release for sync
          if [[ ! "$BRANCH" =~ ^(hotfix|release)/ ]]; then
            echo "Not a hotfix or release branch - no sync needed"
            exit 0
          fi
          
          # Determine sync direction
          if [ "$TARGET" = "main" ]; then
            SYNC_TO="development"
          elif [ "$TARGET" = "development" ]; then
            SYNC_TO="main"
          else
            exit 0
          fi
          
          # Try merge
          git fetch origin
          git checkout $SYNC_TO
          
          if git merge origin/$TARGET -m "Sync from $TARGET after $BRANCH"; then
            git push origin $SYNC_TO
          else
            # Create PR on conflict
            SYNC_BRANCH="sync-${GITHUB_RUN_NUMBER}"
            git checkout -b $SYNC_BRANCH origin/$TARGET
            git push origin $SYNC_BRANCH
            gh pr create --base $SYNC_TO --head $SYNC_BRANCH --title "Sync $TARGET to $SYNC_TO" --body "Conflicts need resolution"
          fi
